{"name":"ruby-on-rails","text":"# My Thoughts on Ruby on Rails in 2018\n\nBack in the days Javascript didn't have all the ES6 goodness and was mostly used for simple DOM manipulations. Three scripting languages were popular for building backend - PHP, Python and Ruby. I chose Ruby, mainly because the whole development process felt easy and straightforward - there was a gem almost for any task and all you had to do was to connect those gems together: gems like Kaminari, Devise, Simpleform, ActiveAdmin - they all had integrated Javascript, ERB templates, and were tied up to ActiveRecord, so you could just \"gem install thing\" and use it right away. There were some troubles with metaprogramming and the whole \"convention over configuration\" approach, MVC pattern, scalability issues and whatnot, but it worked very well for an average project.\n\nIn fact, not too much changed in Rails since then, so my use of past tense is inappropriate. We can still use it that way. But Web itself has changed. Now we have highly dynamic, interactive, feature-rich frontend - a lot of logic went from the backend to the frontend and it's very hard to maintain something like ERB+jQuery. Frameworks like React make it much easier. When building Single Page Application, all you need from Rails is an API.\n\nIt means that we don't need Sprockets since packaging is now done with Webpack. We don't need ERB and the whole ActiveSupport, since we don't need templates per se. And we can't use those Lego gems, which made Rails so special, in SPA.\n\nRails is still a solid framework for building APIs, but I came to conclusion that it's not that useful anymore. At least, for me. If you made tens and hungers of websites with it, maybe contributed to Rails itself or to any popular gem, then you probably know every dark corner of the framework and you are like fish in the water. I am not, so I'm going full stack Javascript.\n\nNowadays Ruby is arguably no better than JS ES7 (except for the type system). They are both interpreted languages with somewhat similar performance. Ruby isn't used much outside of Rails, so I don't see any purpose of using two similar tools for the same task. I don't want to maintain additional development environment and I don't want to remember the standard library and APIs for every gem, switching the context every time I write backend. I don't want two hammers in my toolbox. I want to reuse same modules both on the frontend and on the backend.\n\nMarch 6, 2018\nVasily Tokarev\n","title":"My Thoughts on Ruby on Rails in 2018"}